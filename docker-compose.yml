version: '3.7'

services:

  flask-base-redis:
    image: redis:latest
    container_name: flask-base-redis
    ports:
      - "6379:6379"
    restart: always
    tty: true

  flask-base-postgres:
    image: postgres
    container_name: flask-base-postgres
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - ./data-persist:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    tty: true

  flask-base-pgadmin4:
    image: dpage/pgadmin4
    container_name: flask-base-pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "test@test.com"
      PGADMIN_DEFAULT_PASSWORD: "123"
    ports:
      - "8888:80"
    depends_on:
      - flask-base-postgres
    links:
      - flask-base-postgres:db
    restart: always
    tty: true

  flask-base-sonarqube:
    image: sonarqube:8.4.1-community
    container_name: flask-base-sonarqube
    environment:
      - sonar.jdbc.username=postgres
      - sonar.jdbc.password=postgres
      - sonar.jdbc.url=jdbc:postgresql://flask-base-postgres:5432/sonarqube
      - sonar.search.javaAdditionalOpts=-Dbootstrap.system_call_filter=false
    user: "999"  
    ulimits:
      nofile:
       soft: 65536
       hard: 65536  
    ports:
      - "9000:9000"
    depends_on:
      - flask-base-postgres
    links:
      - flask-base-postgres:db         
    restart: always
    tty: true

  flask-api:
    container_name: flask-api
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    environment:
      - CACHE_REDIS_URL=redis://flask-base-redis:6379/0
      - CACHE_DEFAULT_TIMEOUT=300
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_URL=flask-base-postgres:5432
      - POSTGRES_DB=flask-base
      - APP_ENV=production
      - SECRET_KEY=7311a881f138d32a94994cef3e4b855e
    depends_on:
      - flask-base-postgres
      - flask-base-redis
    links:
      - flask-base-postgres
      - flask-base-redis
    restart: always
    ports:
      - "8000:8000"
    command: bash -c "cd /app && gunicorn wsgi:app -b 0.0.0.0:8000 -w 4 -k gevent"

  flask-nginx:
    container_name: flask-nginx
    build:
      context: docker/
      dockerfile: Dockerfile.nginx
    depends_on:
      - flask-api
    links:
      - flask-api
    restart: always
    ports:
      - "80:80"